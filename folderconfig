#!/usr/bin/env python3

import sys
from common.arg_utils import get_all_args
from common.data_utils import coalesce
from common.file_utils import *
from pathlib import Path
from os import access, R_OK, W_OK
from common.io_utils import read_pipelined_input
import json


CONFIG_FILE_NAME = '.-personal-config-file.json'


def main():
    arguments = get_all_args(sys.argv[1:])
    if 0 not in arguments:
        return print(NO_SUBCOMMAND_GIVEN)
    
    arguments[0] = arguments[0].lower()
    if arguments[0] not in ('set', 'get'):
        return print(NO_SUBCOMMAND_GIVEN)
    
    if arguments[0] == 'set':
        set_command(arguments)
    if arguments[0] == 'get':
        get_command(arguments)


def set_command(arguments):
    if 1 not in arguments or 2 not in arguments:
        return print(INVALID_SET_COMMAND)
    key, value = arguments[1], arguments[2]
    force_curr_folder = 'force-curr-folder' in arguments
    set(key, value, force_curr_folder=force_curr_folder, config_file_name=CONFIG_FILE_NAME, path=".")



def set(key, value, force_curr_folder: bool = False, config_file_name=CONFIG_FILE_NAME, path="."):
    if force_curr_folder:
        empty_json_obj = '{}'
        create_if_not_exists(config_file_name, empty_json_obj)
    
    filepath = get_file_that_contains_config(config_file_name, must_be_writable=True, path=path)
    if filepath is None:
        raise FileNotFoundError("No configuration file is found. If you want to force create in current directory, add -force-curr-folder command")

    jsonobj = read_json(filepath)
    jsonobj[key] = value
    write_json(filepath, jsonobj)


def get_command(arguments):
    if 1 not in arguments:
        return print(INVALID_GET_COMMAND)
    
    key = arguments[1]
    not_found_error = KeyError(f"{key} cannot be found")
    default_value = arguments.get('default', not_found_error)
    
    value = get(key, config_file_name=CONFIG_FILE_NAME, path=".", default_value=default_value)
    value = coalesce(value, '')
    print(value, end='')


def get(key, config_file_name=CONFIG_FILE_NAME, path=".", default_value=None):
    filepath = get_file_that_contains_config(CONFIG_FILE_NAME, key=key)
    return read_json_key(filepath, key, default=default_value)


COMMAND_NAME = "folderconfig.py"

NO_SUBCOMMAND_GIVEN = f"""
usage: {COMMAND_NAME} <SUBCOMMAND> <KEY>
where SUBCOMMAND is either `set` or `get`
""".strip()


INVALID_SET_COMMAND = f"""
usage: {COMMAND_NAME} set <KEY> <VALUE> [-force-curr-folder]

-force-curr-folder: 
If opted-in, then will force to create a config file in current folder and put the configuration key-value there. 
If not opted-in, then it will find the closest configuration file, and error if not exists.
""".strip()

INVALID_GET_COMMAND = f"""
usage: {COMMAND_NAME} get <KEY> [-default DEFAULT_VALUE]

-default DEFAULT_VALUEL:
If provided, then will return DEFAULT_VALUE when the key cannot be found. It will throw an error otherwise.
""".strip()

if __name__ == "__main__":
    main()