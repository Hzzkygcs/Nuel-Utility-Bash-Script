#!/usr/bin/env bash

#------------ created by Hzzkygcs ------------#

get_latest_commit_url() {
  LATEST_COMMIT_HASH=$(git log -1 --format=%H)
  REPO_URL=$(git open --print | sed -E 's|(/tree/.*)|/commits|')
  COMMIT_URL="$REPO_URL/$LATEST_COMMIT_HASH"
   echo $COMMIT_URL
}
open_in_browser() {
  local URL=$1

  # Open the URL in the default browser based on the OS
  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    xdg-open $URL
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    open $URL
  elif [[ "$OSTYPE" == "cygwin" ]]; then
    cygstart $URL
  elif [[ "$OSTYPE" == "msys" ]]; then
    start $URL
  elif [[ "$OSTYPE" == "win32" ]]; then
    start $URL
  else
    echo "Unsupported OS: please open the URL manually"
  fi
}


CURR_SCRIPT_DIR=$(dirname -- "$( readlink -f -- "$0"; )")

project_name=$(folderconfig get project_name -default "0")
if [ "$project_name" == "0" ]; then
  echo "Error: project_name is not set. What is the project_name?"
  read project_name
  echo ""
  echo "Please run this command, which should have been copied to your clipboard:"
  project_command="folderconfig set project_name $project_name -create-if-not-exist; echo '.-personal-config-file.json' >> .git/info/exclude"
  echo ""
  echo "$project_command"
  echo "$project_command" | xclip -selection clipboard 2>&1 &> /dev/null || true
  echo "$project_command" | pbcopy  2>&1 &> /dev/null || true
  exit 1
fi

DEPLOYMENT_ENV="sit"
if [ "$1" == "prod" ]; then
    CONFIRMATION_MSG="production $project_name"
    git_branch_name=$(git rev-parse --abbrev-ref HEAD)
    echo "Are you sure you want to deploy to prod: $git_branch_name  -->  $project_name?"
    echo "Please type \"$CONFIRMATION_MSG\""
    echo ""
    read confirmation_input
    if [ "$confirmation_input" != "$CONFIRMATION_MSG" ]; then
        echo "Wrong confirmation message..."
        exit 1
    fi
    DEPLOYMENT_ENV="prod"
    echo "DEPLOYING PROD $project_name"
fi

kube_repo=$(folderconfig get deployment_repo -default "kube-repo")
kube_repo="$CURR_SCRIPT_DIR/deploysit/$kube_repo"
yaml_path=$(folderconfig get yaml_path -default "environment-charts/$DEPLOYMENT_ENV/values.yaml")
number_of_chars=$(folderconfig get yaml_path -default "4")

git_commit=$(git log -n 1 --pretty=format:"%H" | cut "-c1-$number_of_chars")
git_branch_name=$(git rev-parse --abbrev-ref HEAD)
local_commit=$(git rev-parse "$git_branch_name")
remote_commit=$(git rev-parse "origin/$git_branch_name")
if [ "$local_commit" != "$remote_commit" ]; then
    echo "ERROR: Please push your commit first"
    exit 1
fi


last_git_commit_msg=$(git log --no-merges -n 1 --pretty=format:"%s")
# Check if there is a colon in the commit message
if [[ "$last_git_commit_msg" == *:* ]]; then
  first_word=$(echo "$last_git_commit_msg" | grep -o '^[[:alnum:]]*')

  # Remove all characters up to the first colon and trim leading whitespace
  last_git_commit_msg="${last_git_commit_msg#*:}"
  last_git_commit_msg="$first_word ${last_git_commit_msg#"${last_git_commit_msg%%[![:space:]]*}"}"
fi

echo "$last_git_commit_msg"
exit 1

full_yaml_path="$kube_repo/$yaml_path"
COMMIT_URL=$(get_latest_commit_url)

echo "Project name: $project_name"
echo "Kube repo: $kube_repo"
echo "YAML repo: $yaml_path"
echo "Num of commit chars: $number_of_chars"
echo "Git commit: $git_commit"
if [ "$DEPLOYMENT_ENV" = "prod" ]; then
  echo "DEPLOYING PROD $project_name"
fi

cd "$kube_repo"
if [ "$1" == "open" ]; then
    COMMIT_URL=$(get_latest_commit_url)
    open_in_browser $COMMIT_URL
    exit 0
fi

echo "Pulling..."
git reset --hard
git clean -fd
git pull


if [ "$DEPLOYMENT_ENV" = "prod" ]; then
  echo "DEPLOYING PROD $project_name"
fi
echo "Running..."

replaced_image=$("$CURR_SCRIPT_DIR/deploysit/yaml_edit.py" "$full_yaml_path" "$project_name" "$git_commit")
if [ $? -ne 0 ]; then
    echo "The yaml_edit.py command failed"
    echo "$replaced_image"
    echo ""
    echo ""
    exit 1
fi

echo ""

commit_name="deploy($DEPLOYMENT_ENV/$project_name): $last_git_commit_msg ($replaced_image) [$git_branch_name]\n\n$COMMIT_URL"
commit_name=$(echo -e "$commit_name")
echo "$commit_name"

echo ""
echo ""
git add .
git commit -m "$commit_name"
if [ $? -ne 0 ]; then
    exit 1
fi
git push
if [ $? -ne 0 ]; then
    exit 1
fi

echo ""
echo ""
echo "$commit_name"
if [ "$DEPLOYMENT_ENV" = "prod" ]; then
  echo "DEPLOYED PROD $project_name"
fi
echo ""

COMMIT_URL=$(get_latest_commit_url)
open_in_browser $COMMIT_URL  # open repo kube to see its pipeline
